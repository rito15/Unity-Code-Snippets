<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
           <Title>Singleton Class</Title>
           <Author>Rito</Author>
           <Description>Singleton Class Code Sinppet</Description>
           <Shortcut>singleton</Shortcut>
        </Header>
        <Snippet>
            <Declarations>
              <Literal>
                <ID>className</ID>
                <ToolTip>클래스명</ToolTip>
                <Default>__ClassName__</Default>
              </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[#region Singleton - Public

                /// <summary> 싱글톤 인스턴스 Getter </summary>
                public static $className$$selected$$end$ Instance
                {
                    get
                    {
                        if (instance == null)    // 체크 1 : 인스턴스가 없는 경우
                            CheckExsistence();

                        return instance;
                    }
                }

                /// <summary> 싱글톤 인스턴스의 또다른 이름 </summary>
                public static $className$ Sin => Instance;
                /// <summary> 싱글톤 인스턴스의 또다른 이름 </summary>
                public static $className$ Ins => Instance;
                /// <summary> 싱글톤 인스턴스의 또다른 이름 </summary>
                public static $className$ I => Instance;

                /// <summary>
                /// 싱글톤을 그저 생성하기 위한 메소드
                /// </summary>
                public void Call() { }

                /// <summary>
                /// 싱글톤을 그저 생성하기 위한 정적 메소드
                /// </summary>
                public static void Call_()
                {
                    if (instance == null)
                        CheckExsistence();
                }

                #endregion // ==================================================================

                #region Singleton - Private

                // 싱글톤 인스턴스
                private static $className$ instance;

                // 싱글톤 인스턴스 존재 여부 확인 (체크 2)
                private static void CheckExsistence()
                {
                    // 싱글톤 검색
                    instance = FindObjectOfType<$className$>();

                    // 인스턴스 가진 오브젝트가 존재하지 않을 경우, 빈 오브젝트를 임의로 생성하여 인스턴스 할당
                    if (instance == null)
                    {
                        // 빈 게임 오브젝트 생성
                        GameObject container = new GameObject("$className$ Singleton Container");

                        // 게임 오브젝트에 클래스 컴포넌트 추가 후 인스턴스 할당
                        instance = container.AddComponent<$className$>();
                    }
                }

                /// <summary> 
                /// [Awake()에서 호출]
                /// <para/> 싱글톤 스크립트를 미리 오브젝트에 담아 사용하는 경우를 위한 로직
                /// </summary>
                private void CheckInstance()
                {
                    // 싱글톤 인스턴스가 존재하지 않았을 경우, 본인으로 초기화
                    if (instance == null)
                        instance = this;

                    // 싱글톤 인스턴스가 존재하는데, 본인이 아닐 경우, 스스로(컴포넌트)를 파괴
                    if (instance != null && instance != this)
                    {
                        Debug.Log("이미 $className$ 싱글톤이 존재하므로 오브젝트를 파괴합니다.");
                        Destroy(this);

                        // 만약 게임 오브젝트에 컴포넌트가 자신만 있었다면, 게임 오브젝트도 파괴
                        var components = gameObject.GetComponents<Component>();

                        if (components.Length <= 2)
                            Destroy(gameObject);
                    }
                }

                #endregion // ==================================================================
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>